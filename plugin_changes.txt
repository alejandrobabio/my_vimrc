ag.vim
auto_mkdir
auto-pairs
gist-vim
goyo.vim
greplace.vim
gundo.vim
nerdtree
syntastic
tagbar
typescript-vim
ultisnips
vim-airline
vim-coffee-script
vim-colorschemes
vim-commentary
vim-easy-align
vim-fugitive
vim-indent-object
vim-jsx
vim-markdown
diff --git a/syntax/markdown.vim b/syntax/markdown.vim
index 49dbe3a..d6aa7a9 100644
--- a/syntax/markdown.vim
+++ b/syntax/markdown.vim
@@ -77,7 +77,8 @@ syn region markdownAutomaticLink matchgroup=markdownUrlDelimiter start="<\%(\w\+
 
 let s:concealends = has('conceal') ? ' concealends' : ''
 exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\S\@<=\*\|\*\S\@=" end="\S\@<=\*\|\*\S\@=" keepend contains=markdownLineStart' . s:concealends
-exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\S\@<=_\|_\S\@=" end="\S\@<=_\|_\S\@=" keepend contains=markdownLineStart' . s:concealends
+" allow use _ without highligting as italic.
+" exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\S\@<=_\|_\S\@=" end="\S\@<=_\|_\S\@=" keepend contains=markdownLineStart' . s:concealends
 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\S\@<=\*\*\|\*\*\S\@=" end="\S\@<=\*\*\|\*\*\S\@=" keepend contains=markdownLineStart,markdownItalic' . s:concealends
 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\S\@<=__\|__\S\@=" end="\S\@<=__\|__\S\@=" keepend contains=markdownLineStart,markdownItalic' . s:concealends
 exe 'syn region markdownBoldItalic matchgroup=markdownBoldItalicDelimiter start="\S\@<=\*\*\*\|\*\*\*\S\@=" end="\S\@<=\*\*\*\|\*\*\*\S\@=" keepend contains=markdownLineStart' . s:concealends
vim-multiple-cursors
vim-rails
vim-reek
diff --git a/plugin/reek.vim b/plugin/reek.vim
index 23b192a..edecb5d 100644
--- a/plugin/reek.vim
+++ b/plugin/reek.vim
@@ -40,7 +40,8 @@ function! s:Reek()
     end
   endfor
 
-  call setloclist(0, loclist)
+  call setqflist(loclist)
+  " call setloclist(0, loclist)
   if len(loclist) > 0
     exec has("gui_running") ? "redraw!" : "redraw"
     if g:reek_always_show
@@ -55,7 +56,8 @@ endfunction
 " Function to run reek and display location list
 function s:RunReek()
   call s:Reek()
-  lopen
+  " lopen
+  copen
 endfunction
 
 " Only set up automatic call if we request reek_on_loading
vim-rubocop
vim-ruby
vim-slim
vim-snippets
diff --git a/snippets/ruby.snippets b/snippets/ruby.snippets
index 6b9d85d..68e2345 100644
--- a/snippets/ruby.snippets
+++ b/snippets/ruby.snippets
@@ -20,7 +20,7 @@ snippet priv
 	private
 
 	${0}
-snippet y
+snippet y yields
 	:yields: ${0:arguments}
 snippet rb
 	#!/usr/bin/env ruby -wKU
@@ -32,7 +32,7 @@ snippet beg
 
 snippet req require
 	require '${1}'
-snippet reqr
+snippet reqr require_relative
 	require_relative '${1}'
 snippet #
 	# =>
@@ -99,7 +99,7 @@ snippet unlesee
 	else
 		$0
 	end
-snippet wh
+snippet wh while
 	while ${1:condition}
 		${0}
 	end
@@ -136,7 +136,7 @@ snippet claself class << self .. end
 		${0}
 	end
 # class .. < DelegateClass .. initialize .. end
-snippet cla-
+snippet cla- class .. < DelegateClass .. initialize .. end
 	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < DelegateClass(${2:ParentClass})
 		def initialize(${3:args})
 			super(${4:del_obj})
@@ -164,58 +164,58 @@ snippet mod module .. ClassMethods .. end
 		end
 	end
 # attr_reader
-snippet r
+snippet r attr_reader
 	attr_reader :${0:attr_names}
 # attr_writer
-snippet w
+snippet w attr_writer
 	attr_writer :${0:attr_names}
 # attr_accessor
-snippet rw
+snippet rw attr_accessor
 	attr_accessor :${0:attr_names}
-snippet atp
+snippet atp attr_protected
 	attr_protected :${0:attr_names}
-snippet ata
+snippet ata attr_accessible
 	attr_accessible :${0:attr_names}
-snippet ana
+snippet ana accepts_nested_attributes_for
 	accepts_nested_attributes_for :${0:association}
 # ivc == instance variable cache
-snippet ivc
+snippet ivc instance variable cache
 	@${1:variable_name} ||= ${0:cached_value}
 # include Enumerable
-snippet Enum
+snippet Enum include Enumerable
 	include Enumerable
 
 	def each(&block)
 		${0}
 	end
 # include Comparable
-snippet Comp
+snippet Comp include Comparable
 	include Comparable
 
 	def <=>(other)
 		${0}
 	end
 # extend Forwardable
-snippet Forw-
+snippet Forw- extend Forwardable
 	extend Forwardable
 # def self
-snippet defs
+snippet defs def self
 	def self.${1:class_method_name}
 		${0}
 	end
 # def initialize
-snippet definit
+snippet definit def initialize
 	def initialize(${1:args})
 		${0}
 	end
 # def method_missing
-snippet defmm
+snippet defmm def method_missing
 	def method_missing(meth, *args, &blk)
 		${0}
 	end
-snippet defd
+snippet defd def_delegator
 	def_delegator :${1:@del_obj}, :${2:del_meth}, :${0:new_name}
-snippet defds
+snippet defds def_delegators
 	def_delegators :${1:@del_obj}, :${0:del_methods}
 snippet am
 	alias_method :${1:new_name}, :${0:old_name}
@@ -247,9 +247,9 @@ snippet Dir Dir[".."]
 	Dir[${1:'glob/**/*.rb'}]
 snippet dir
 	Filename.dirname(__FILE__)
-snippet deli
+snippet deli delete_if
 	delete_if { |${1:e}| ${0} }
-snippet fil
+snippet fil fill
 	fill(${1:range}) { |${2:i}| ${0} }
 # flatten_once()
 snippet flao
@@ -257,91 +257,91 @@ snippet flao
 snippet zip
 	zip(${1:enums}) { |${2:row}| ${0} }
 # downto(0) { |n| .. }
-snippet dow
+snippet dow downto
 	downto(${1:0}) { |${2:n}| ${0} }
-snippet ste
+snippet ste step
 	step(${1:2}) { |${2:n}| ${0} }
-snippet tim
+snippet tim times
 	times { |${1:n}| ${0} }
-snippet upt
+snippet upt upto
 	upto(${1:1.0/0.0}) { |${2:n}| ${0} }
-snippet loo
+snippet loo loop
 	loop { ${0} }
-snippet ea
+snippet ea each
 	each { |${1:e}| ${0} }
-snippet ead
+snippet ead each do
 	each do |${1:e}|
 		${0}
 	end
-snippet eab
+snippet eab each_byte
 	each_byte { |${1:byte}| ${0} }
 snippet eac- each_char { |chr| .. }
 	each_char { |${1:chr}| ${0} }
 snippet eac- each_cons(..) { |group| .. }
 	each_cons(${1:2}) { |${2:group}| ${0} }
-snippet eai
+snippet eai each_index
 	each_index { |${1:i}| ${0} }
-snippet eaid
+snippet eaid each_index do
 	each_index do |${1:i}|
 		${0}
 	end
-snippet eak
+snippet eak each_key
 	each_key { |${1:key}| ${0} }
-snippet eakd
+snippet eakd each_key do
 	each_key do |${1:key}|
 		${0}
 	end
-snippet eal
+snippet eal each_line
 	each_line { |${1:line}| ${0} }
-snippet eald
+snippet eald each_line do
 	each_line do |${1:line}|
 		${0}
 	end
-snippet eap
+snippet eap each_pair
 	each_pair { |${1:name}, ${2:val}| ${0} }
-snippet eapd
+snippet eapd each_pair do
 	each_pair do |${1:name}, ${2:val}|
 		${0}
 	end
-snippet eas-
+snippet eas- each_slice
 	each_slice(${1:2}) { |${2:group}| ${0} }
-snippet easd-
+snippet easd- each_slice do
 	each_slice(${1:2}) do |${2:group}|
 		${0}
 	end
-snippet eav
+snippet eav each_value
 	each_value { |${1:val}| ${0} }
-snippet eavd
+snippet eavd each_value do
 	each_value do |${1:val}|
 		${0}
 	end
-snippet eawi
+snippet eawi each_with_index
 	each_with_index { |${1:e}, ${2:i}| ${0} }
-snippet eawid
+snippet eawid each_with_index do
 	each_with_index do |${1:e}, ${2:i}|
 		${0}
 	end
-snippet eawo
+snippet eawo each_with_object
 	each_with_object(${1:init}) { |${2:e}, ${3:var}| ${0} }
-snippet eawod
+snippet eawod each_with_object do
 	each_with_object(${1:init}) do |${2:e}, ${3:var}|
 		${0}
 	end
-snippet reve
+snippet reve reverse_each
 	reverse_each { |${1:e}| ${0} }
-snippet reved
+snippet reved reverse_each do
 	reverse_each do |${1:e}|
 		${0}
 	end
-snippet inj
+snippet inj inject
 	inject(${1:init}) { |${2:mem}, ${3:var}| ${0} }
-snippet injd
+snippet injd inject do
 	inject(${1:init}) do |${2:mem}, ${3:var}|
 		${0}
 	end
-snippet red
+snippet red reduce
 	reduce(${1:init}) { |${2:mem}, ${3:var}| ${0} }
-snippet redd
+snippet redd reduce do
 	reduce(${1:init}) do |${2:mem}, ${3:var}|
 		${0}
 	end
vim-surround
vim-textobj-rubyblock
vim-textobj-user
vim-wakatime
webapi-vim
YouCompleteMe
